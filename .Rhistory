## 1. set the value of the vector
## 2. get the value of the vector
## 3. set the value of the mean
## 4. get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
set <- function(y) {
x <<- y
a <<- NULL
}
get <- function() x
setinverse <- function(inverse) a <<- inverse
getinverse <- function() a
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Calculates the inverse of the special "matrix" created with above function.
## First checks to see if the inverse has already been calculated. If so, it
## gets the inverse from the cache and skips the computation. Otherwise, it
## calculates the inverse of the data and sets the value of the inverse in the
## cache via the setinverse function.
## Assumes matrix is inversible
cacheSolve <- function(x, ...) {
## Returns a matrix that is the inverse of 'x' from cache
a <- x$getinverse()
if(is.null(a)) {
message("getting cached data")
return(a)
}
## Computes inverse if there is no data from cache
data <- x$get()
i <- solve(data, ...)
## setinverse to put value of inverse into cache
x$setinverse(a)
a
}
m = makeCacheMatrix(x)
cacheSolve(m)
cacheSolve(m)
a = makeCacheMatrix(x)
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly
## This pair of functions will cache the inverse of a matrix.
## Write a short comment describing this function
## The function 'makeCacheMatrix' creates a list containing a function to
## 1. set the value of the vector
## 2. get the value of the vector
## 3. set the value of the mean
## 4. get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
set <- function(y) {
x <<- y
a <<- NULL
}
get <- function() x
setinverse <- function(inverse) a <<- inverse
getinverse <- function() a
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Calculates the inverse of the special "matrix" created with above function.
## First checks to see if the inverse has already been calculated. If so, it
## gets the inverse from the cache and skips the computation. Otherwise, it
## calculates the inverse of the data and sets the value of the inverse in the
## cache via the setinverse function.
## Assumes matrix is inversible
cacheSolve <- function(x, ...) {
## Returns a matrix that is the inverse of 'x' from cache
a <- x$getinverse()
if(!is.null(a)) { # check to see if cacheSolve has been run before
message("getting cached data")
return(a)
}
## Computes inverse if there is no data from cache
data <- x$get()
i <- solve(data, ...)
## setinverse to put value of inverse into cache
x$setinverse(a)
a
}
cacheSolve(a)
cacheSolve(a)
a
cacheSolve(a)
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly
## This pair of functions will cache the inverse of a matrix.
## Write a short comment describing this function
## The function 'makeCacheMatrix' creates a list containing a function to
## 1. set the value of the vector
## 2. get the value of the vector
## 3. set the value of the mean
## 4. get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
a <- NULL
set <- function(y) {
x <<- y
a <<- NULL
}
get <- function() x
setinverse <- function(inverse) a <<- inverse
getinverse <- function() a
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Calculates the inverse of the special "matrix" created with above function.
## First checks to see if the inverse has already been calculated. If so, it
## gets the inverse from the cache and skips the computation. Otherwise, it
## calculates the inverse of the data and sets the value of the inverse in the
## cache via the setinverse function.
## Assumes matrix is inversible
cacheSolve <- function(x, ...) {
## Returns a matrix that is the inverse of 'x' from cache
a <- x$getinverse()
if(!is.null(a)) {
message("getting cached data")
return(a)
}
## Computes inverse if there is no data from cache
data <- x$get()
i <- solve(data, ...)
## setinverse to put value of inverse into cache
x$setinverse(a)
a
}
a <- makeCacheMatrix(x)
cacheSolve(a)
cacheSolve(a)
x
a
a$get()
b <- makeCacheMatrix)(x)
b <- makeCacheMatrix(x)
cacheSolve(b)
class(x)
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly
## This pair of functions will cache the inverse of a matrix.
## Write a short comment describing this function
## The function 'makeCacheMatrix' creates a list containing a function to
## 1. set the value of the vector
## 2. get the value of the vector
## 3. set the value of the mean
## 4. get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Calculates the inverse of the special "matrix" created with above function.
## First checks to see if the inverse has already been calculated. If so, it
## gets the inverse from the cache and skips the computation. Otherwise, it
## calculates the inverse of the data and sets the value of the inverse in the
## cache via the setinverse function.
## Assumes matrix is inversible
cacheSolve <- function(x, ...) {
## Returns a matrix that is the inverse of 'x' from cache
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
## Computes inverse if there is no data from cache
data <- x$get()
i <- solve(data, ...)
## setinverse to put value of inverse into cache
x$setinverse(i)
i
}
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly
## This pair of functions will cache the inverse of a matrix.
## Write a short comment describing this function
## The function 'makeCacheMatrix' creates a list containing a function to
## 1. set the value of the vector
## 2. get the value of the vector
## 3. set the value of the mean
## 4. get the value of the mean
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Calculates the inverse of the special "matrix" created with above function.
## First checks to see if the inverse has already been calculated. If so, it
## gets the inverse from the cache and skips the computation. Otherwise, it
## calculates the inverse of the data and sets the value of the inverse in the
## cache via the setinverse function.
## Assumes matrix is inversible
cacheSolve <- function(x, ...) {
## Returns a matrix that is the inverse of 'x' from cache
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
## Computes inverse if there is no data from cache
data <- x$get()
i <- solve(data, ...)
## setinverse to put value of inverse into cache
x$setinverse(i)
return(i)
}
x <- matrix(c(1,2,2,1), 2, 2)
x
mat = makeCacheMatrix(x)
mat
mat$get()
mat$getinverse()
cacheSolve(mat)
cacheSolve(mat)
library(datasets)
data(iris)
?iris
summary(iris)
iris
?colmeans
?col.means
?colMeans
colMeans(iris[101:150,"Sepal.Length"])
apply(iris, iris[101:150, "Sepal.Length"], mean)
iris[101:150, "Sepal.Length"]
x <- iris[101:150, "Sepal.Length"]
apply(x, mean)
apply(x, FUN = mean)
?mean
mean(x)
rowMeans(iris[,1:4])
colMeans(iris)
iris
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
?apply
library(datasets)
data(mtcars)
?mtcars
mtcars
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?split
split(mtcars, mtcars$cyl)
avgHP <- sapply(split(mtcars$hp, mtcars$cyl), mean)
avgHP
avgHP[8] - avgHP[4]
avgHP[,1] - avgHP[,3]
avgHP["4"]
avgHP["4"] - avgHP["8"]
debug(ls)
ls()
exit()
?debug()
?debug
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
head(airquality)
airquality
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print(p) ## Plot appears
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2,1))
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) # First call the default panel function for xyplot
panel.abline(h = median(y), lty = 2) # Add horizontal line at the median
})
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) # First call the default panel function for xyplot
panel.lmline(x, y, col = 2) # Add a simple linear regression line
})
library(ggplot2)
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(hwy, data = mpg, fill = drv)
qplot(hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, fill = drv, facets = drv~.)
library(nlme)
library(lattice)
xyplot(Weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x,y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
df <- data.frame(x = x, y = y)
df <- data.frame(x = x, y = y)
dist(df)
distxy <- dist(df)
hClustering <- hclust(distxy)
plot(hClustering)
# myplclust function
myplclust <- function(hclust, lab = hclust$labels, lab.col = rep(1, length(hclust$labels)),
hang = 0.1, ...) {
## modifiction of plclust for plotting hclust objects *in colour*!  Copyright
## Eva KF Chan 2009 Arguments: hclust: hclust object lab: a character vector
## of labels of the leaves of the tree lab.col: colour for the labels;
## NA=default device foreground colour hang: as in hclust & plclust Side
## effect: A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height, 2)
x <- as.numeric(hclust$merge)
y <- y[which(x < 0)]
x <- x[which(x < 0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot(hclust, labels = FALSE, hang = hang, ...)
text(x = x, y = y[hclust$order] - (max(hclust$height) * hang), labels = lab[hclust$order],
col = lab.col[hclust$order], srt = 90, adj = c(1, 0.5), xpd = NA, ...)
}
myplclust(hClustering, lab = rep(1:3, each = 4), lab.col = rep(1:3, each =4))
set.seed(143)
dataFrame <- data.frame(x = x, y=y)
set.seed(143)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
heatmap(dataMatrix)
set.seed(1234)
par(mar = c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnomr(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each = 4), sd = 0.2)
plot(x,y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2,4))
plot(x,y,col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
library(kernlab)
data(spam)
str(spam[, 1:5])
# Perform the subsampling
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
names(trainSpam)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
library(ggplot2)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
data <- read.csv(unz("activity.zip"))
getwd()
setwd("~/DataScience/Reproducible Research/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip"))
help(unz)
data <- read.table(unz("household_power_consumption.zip", header = T, sep = ";")
if(!file.exists("activity.csv")){
unzip("activity.zip")
}
if(!file.exists("activity.csv")){
unzip("activity.zip")
}
data <- read.csv("activity.csv")
summary(data)
head(data)
first(data)
boxplot(data)
data
summary(data)
tail(data)
dim(data)
str(data)
levels(data)
levels(data$date)
class(data$date)
summary(data)
str(data)
data$interval
hist(data$steps, data$date)
stepsperday <- tapply(data$steps, data$date, sum, na.rm=TRUE)
stepsperday
hist(stepsperday)
qplot(stepsperday, xlab="Total steps per day", ylab="Frequency")
qplot(stepsperday, xlab="Total steps per day", ylab="Frequency", binwidth=500)
data$date <- as.Date(data$date, "%Y-%m-%d")
class(data$date)
hist(stepsperday, main = "Total steps per day", xlab = "day", col = "green")
stepsperday
mean(stepsperday)
mean(stepsperday$steps)
str(stepsperday)
dim(stepsperday)
mean(stepsperday)
StepsTotal <- aggregate(steps ~ date, data = activity, sum, na.rm = TRUE)
StepsTotal <- aggregate(steps ~ date, data = data, sum, na.rm = TRUE)
hist(StepsTotal$steps, main = "Total steps by day", xlab = "day", col = "red")
mean(StepsTotal$steps)
StepsTotal
stepsperday
help(aggregate)
AvgStepsPerInterval <- tapply(data$steps, data$interval, mean, na.rm=TRUE)
AvgStepsPerInterval
names(AvgStepsPerInterval)
row.names(AvgStepsPerInterval)
AvgStepsPerInterval
plot(row.names(AvgStepsPerInterval), AvgStepsPerInterval, type = "l", xlab = "5-minute Intervals", ylab = "Average steps across all days", main = "Average number of steps taken")
max(AvgStepsPerInterval)
row.names(max(AvgStepsPerInterval))
max_steps <- which.max(AvgStepsPerInterval)
names(max_steps)
Total_NA <- sum(is.na(data))
print(Total_NA)
Fill_Missing <- numeric()
Interval_Mean <- aggregate(steps ~ interval, data = data, FUN = mean)
Interval_Mean <- aggregate(steps ~ interval, data = data, FUN = mean)
Fill_Missing <- numeric()
for (i in 1:nrow(data)) {
obs <- data[i,]
if (is.na(obs$steps)) {
steps <- subset(Interval_Mean, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
Fill_Missing <- c(Fill_Missing, steps)
}
new_data <- data
new_data$steps <- Fill_Missing
head(new_data)
StepsTotal2 <- aggregate(steps ~ date, data = new_data, sum, na.rm = TRUE)
hist(StepsTotal2$steps, main = "Total steps by day", xlab = "day", col = "red")
mean(StepsTotal$steps)
median(StepsTotal$steps)
mean(StepsTotal2$steps)
median(StepsTotal2$steps)
weekdats(data$date)
weekdays(data$date)
days <- weekdays(data$date)
days <- weekdays(data$date)
Day_Type <- vector()
for (i in 1:nrow(data)) {
if (days[i] == "Saturday") {
Day_Type[i] <- "Weekend"
} else if (day[i] == "Sunday") {
Day_Type[i] <- "Weekend"
} else {
Day_Type[i] <- "Weekday"
}
}
Day_Type <- vector()
for (i in 1:nrow(data)) {
if (days[i] == "Saturday") {
Day_Type[i] <- "Weekend"
} else if (days[i] == "Sunday") {
Day_Type[i] <- "Weekend"
} else {
Day_Type[i] <- "Weekday"
}
}
data$Day_Type <- Day_Type
data$Day_Type <- factor(data$Day_Type)
stepsByDay <- aggregate(steps ~ interval + Day_Type, data = data, mean)
names(stepsByDay) <- c("interval", "Day_Type", "steps")
xyplot(steps ~ interval | Day_Type, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
